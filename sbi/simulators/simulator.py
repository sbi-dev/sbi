class Simulator:
    """
    Base class for all simulator models.
    """

    def __init__(self):
        self.num_total_simulations = 0

    def simulate(self, parameters):
        """
        Core method which returns a torch.Tensor batch of observations given a
        torch.Tensor batch of parameters.

        :param parameters: torch.Tensor batch of parameters.
        :return: torch.Tensor batch of observations.
        """
        raise NotImplementedError

    @staticmethod
    def get_ground_truth_parameters():
        """
        Returns ground truth parameters which generated the observed data x0.

        :return: torch.Tensor true parameters.
        """
        raise NotImplementedError

    @staticmethod
    def get_ground_truth_observation():
        """
        Returns observation x0 generated by ground truth parameters.

        :return: torch.Tensor true observation.
        """
        raise NotImplementedError

    def get_ground_truth(self):
        """
        Returns ground truth (parameter, observation) pair.

        :return: tuple (ground_truth_parameters, ground_truth_observation)
        """
        return self.get_ground_truth_parameters(), self.get_ground_truth_observation()

    @property
    def parameter_dim(self):
        """
        Dimension of parameters for simulator.

        :return: int parameter_dim
        """
        raise NotImplementedError

    @property
    def observation_dim(self):
        """
        Dimension of observations for simulator.
        TODO: decide whether observation_dim always corresponds to dimension of summary.

        :return: int observation_dim
        """
        raise NotImplementedError

    @property
    def name(self):
        """
        Name of the simulator.

        :return: str name
        """
        raise NotImplementedError

    @property
    def parameter_plotting_limits(self):
        """
        Plotting limits for simulator parameters.

        :return:
        """
        raise NotImplementedError


def main():
    pass


if __name__ == "__main__":
    main()
